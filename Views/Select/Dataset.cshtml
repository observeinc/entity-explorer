@using Observe.EntityExplorer.DataObjects;

@model Observe.EntityExplorer.Models.BaseViewModel;

@{
    ViewData["Title"] = "Dataset";
}

<p>
    <span class="spanError">@ViewData["ErrorMessage"]</span>
</p>
@if (ViewData["ErrorMessage"] != null)
{
    return;
}

<p>@Html.ActionLink("Back to Home", "Index", "Home", new { userid=@Model.CurrentUser.UniqueID }, null)</p>

<h1>@Model.ObserveEnvironment.getIconType((ObsCompositeObject)new ObsDataset()) Datasets</h1>
@{
    ObsCompositeObjectType[] categoriesOfDatasets = new ObsCompositeObjectType[] {
        ObsCompositeObjectType.EventDataset, 
        ObsCompositeObjectType.ResourceDataset, 
        ObsCompositeObjectType.IntervalDataset, 
        ObsCompositeObjectType.TableDataset, 
        ObsCompositeObjectType.DatastreamDataset, 
        ObsCompositeObjectType.MetricSMADataset,
        ObsCompositeObjectType.MonitorSupportDataset,
        ObsCompositeObjectType.InterfaceMetricDataset,
        ObsCompositeObjectType.InterfaceLogDataset};
}
<p>
    @foreach (ObsCompositeObjectType objectType in categoriesOfDatasets)
    {    
        <a href="#@objectType">@objectType</a>
    }
</p>

@foreach (ObsCompositeObjectType objectType in categoriesOfDatasets)
{
    List<ObsCompositeObject> selectedDatasets = Model.ObserveEnvironment.ObserveObjects.Where(o => (o.ObjectType & @objectType) == @objectType).ToList();

    if (selectedDatasets.Count > 0)
    {
        <h2 id="@objectType">@objectType (@selectedDatasets.Count)</h2>
        <a href="#top">Back to Top</a>

        <table class="AlternatingRowTable SortableTable">
            <thead>
                <th>View</th>
                <th>Data</th>
                <th>Edit</th>
                <th>Type</th>
                <th>Origin</th>
                <th>ID</th>
                <th>Name</th>
                <th>Description</th>
                <th>Parts</th>
                <th>Uses</th>
                <th>Used By</th>
                <th>Created</th>
                <th>Updated</th>
                <th>Trns+Bfill 1h</th>
                <th>Trns+Bfill 1d</th>
                <th>Trns+Bfill 1w</th>
                <th>Query 1h</th>
                <th>Query 1d</th>
                <th>Query 1w</th>
                <th>Accel Conf.</th>
                <th>Accel Eff.</th>
                <th>Accel Actl.</th>
                <th>Accel Range</th>
            </thead>
            <tbody>
            @foreach (ObsDataset entity in selectedDatasets)
            {
                <tr>
                    <td>@Html.ActionLink("🎫 View", "Dataset", "Details", new { id = entity.id, userid=@Model.CurrentUser.UniqueID }, null)</td>
                    <td><a href="@String.Format("{0}workspace/{1}/dataset/{2}/{3}", @Model.CurrentUser.CustomerEnvironmentUrl, @Model.CurrentUser.WorkspaceID, @Model.ObserveEnvironment.getDatasetURLPartType(entity), entity.id)">📄 Data</a></td>
                    <td><a href="@String.Format("{0}workspace/{1}/definition/{2}", @Model.CurrentUser.CustomerEnvironmentUrl, @Model.CurrentUser.WorkspaceID, entity.id)">🛠️ Edit</a></td>
                    <td>@Model.ObserveEnvironment.getIconType(entity) @entity.kind</td>
                    <td>@Model.ObserveEnvironment.getIconOriginType(entity) <span title="@entity.source">@entity.OriginType</span></td>
                    <td>@entity.id</td>
                    <td>@entity.name</td>
                    <td>
                        @if (entity.description.Length > 0)
                        {
                            <span title="@entity.description">🧾</span> 
                        }
                    </td>
                    <td>
                        @* StagesTODO: -1/  *@
                        Fields: @entity.Fields.Count <br/>
                        @* KeysTODO: -1/ *@
                        @if (@entity.PrimaryKeys.Count > 0) 
                        {
                            @Html.Raw(String.Format("🔑PK: {0} <br/>", entity.PrimaryKeys.Count))
                        }
                        @if (@entity.ForeignKeys.Count > 0) 
                        {
                            @Html.Raw(String.Format("🔐FK: {0} <br/>", entity.ForeignKeys.Count))
                        }
                        @if (@entity.RelatedKeys.Count > 0) 
                        {
                            @Html.Raw(String.Format("🧲RK: {0}", entity.RelatedKeys.Count))
                        }
                    </td>
                    <td>
                        @{
                            List<ObjectRelationship> entityDataRelationshipsSource = Model.ObserveEnvironment.GetRelationshipsOfThis(@entity, ObsObjectRelationshipType.ProvidesData);
                            if (entityDataRelationshipsSource.Count > 0)
                            {
                                @Html.Raw(String.Format("📝Data>This: {0} <br/>", entityDataRelationshipsSource.Count));
                            }
                            List<ObjectRelationship> entityLinkRelationshipsSource = Model.ObserveEnvironment.GetRelationshipsOfThis(@entity, ObsObjectRelationshipType.Linked);
                            if (entityLinkRelationshipsSource.Count > 0)
                            {
                                @Html.Raw(String.Format("🔗Link>This {0} ", entityLinkRelationshipsSource.Count))
                            }
                        }
                    </td>
                    <td>
                        @{
                            List<ObjectRelationship> entityDataRelationshipsTarget = Model.ObserveEnvironment.GetRelationshipsOfRelated(@entity, ObsObjectRelationshipType.ProvidesData);
                            List<ObjectRelationship> entityLinkRelationshipsTarget = Model.ObserveEnvironment.GetRelationshipsOfRelated(@entity, ObsObjectRelationshipType.Linked);
                            //List<ObjectRelationship> parameterRelationships = Model.ObserveEnvironment.GetRelationshipsOfRelated(@entity, ObsObjectRelationshipType.Provides_Parameter);
                            if (entityDataRelationshipsTarget.Count > 0)
                            {
                                @Html.Raw(String.Format("📝This>Data: {0} <br/>", entityDataRelationshipsTarget.Count))
                            }
                            if (entityLinkRelationshipsTarget.Count > 0)
                            {
                                @Html.Raw(String.Format("🔗This>Link: {0} <br/>", entityLinkRelationshipsTarget.Count))
                            }
                            List<ObjectRelationship> monitorDataRelationships = entityDataRelationshipsTarget.Where(r => (((ObsCompositeObject)r.ThisObject).ObjectType & ObsCompositeObjectType.MonitorSupportDataset) == ObsCompositeObjectType.MonitorSupportDataset).ToList();
                            if (monitorDataRelationships.Count > 0)
                            {
                                @Html.Raw(String.Format("📟This>Monitor: {0} <br/>", monitorDataRelationships.Count))
                            }
                            List<ObjectRelationship> entityDashboardRelationshipsData = entityDataRelationshipsTarget.Where(r => (((ObsCompositeObject)r.ThisObject).ObjectType & ObsCompositeObjectType.Dashboard) == ObsCompositeObjectType.Dashboard).ToList();
                            List<ObjectRelationship> entityDashboardRelationshipsLink = entityLinkRelationshipsTarget.Where(r => (((ObsCompositeObject)r.ThisObject).ObjectType & ObsCompositeObjectType.Dashboard) == ObsCompositeObjectType.Dashboard).ToList();
                            if (entityDashboardRelationshipsData.Count > 0 || entityDashboardRelationshipsLink.Count > 0)
                            {
                                @Html.Raw(String.Format("📈This>Dashboard: {0} <br/>", entityDashboardRelationshipsData.Count + entityDashboardRelationshipsLink.Count))
                            }
                            List<ObjectRelationship> entityWorksheetRelationshipsData = entityDataRelationshipsTarget.Where(r => (((ObsCompositeObject)r.ThisObject).ObjectType & ObsCompositeObjectType.Worksheet) == ObsCompositeObjectType.Worksheet).ToList();
                            List<ObjectRelationship> entityWorksheetRelationshipsLink = entityLinkRelationshipsTarget.Where(r => (((ObsCompositeObject)r.ThisObject).ObjectType & ObsCompositeObjectType.Worksheet) == ObsCompositeObjectType.Worksheet).ToList();
                            if (entityWorksheetRelationshipsData.Count > 0 || entityWorksheetRelationshipsLink.Count > 0)
                            {
                                @Html.Raw(String.Format("📝This>Worksheet: {0} <br/>", entityWorksheetRelationshipsData.Count + entityWorksheetRelationshipsLink.Count))
                            }
                            if (entity.Metrics.Count > 0)
                            {
                                @Html.Raw(String.Format("📶This>Metrics: {0}", entity.Metrics.Count))
                            }
                        }
                    </td>
                    <td>@entity.createdDate.ToString("u")/ @entity.createdBy.label</td>
                    <td>@entity.updatedDate.ToString("u")/ @entity.updatedBy.label</td>
                    <td>@entity.Transform1H.Credits.ToString("##0.#")</td>
                    <td>@entity.Transform1D.Credits.ToString("##0.#")</td>
                    <td>@entity.Transform1W.Credits.ToString("##0.#")</td>
                    <td>@entity.Query1H.Credits.ToString("##0.#")</td>
                    <td>@entity.Query1D.Credits.ToString("##0.#")</td>
                    <td>@entity.Query1W.Credits.ToString("##0.#")</td>
                    <td><span title="Configured staleness target of the dataset">@entity.Acceleration.StalenessConfigured</span></td>
                    <td>
                        @{
                            string highlightClass = "";
                            if (entity.Acceleration.StalenessEffective < entity.Acceleration.StalenessConfigured)
                            {
                                highlightClass = "accelSettingDifferent";
                            }
                        }
                        <span title="The target staleness of this dataset when taking downstream datasets" class="@highlightClass">@entity.Acceleration.StalenessEffective</span>
                    </td>
                    <td><span title="Staleness of the dataset (averaged over some moving window)">@entity.Acceleration.StalenessActual</span></td>
                    <td>
                        @foreach (ObsTimeRange timeRange in @entity.Acceleration.AcceleratedRanges)
                        {
                            <span title="@timeRange.start.ToString("u") - @timeRange.end.ToString("u")">@timeRange.duration</span>
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}

<script src="~/js/DetailsCommon.js" asp-append-version="true"></script>