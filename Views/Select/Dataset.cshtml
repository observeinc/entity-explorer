@using Observe.EntityExplorer.DataObjects;

@model Observe.EntityExplorer.Models.BaseViewModel;

@{
    ViewData["Title"] = "Select Dataset";
}

<p>
    <span class="spanError">@ViewData["ErrorMessage"]</span>
</p>
@if (ViewData["ErrorMessage"] != null)
{
    return;
}

<h1>🎫 Select Dataset and Action</h1>
@{
    ObsCompositeObjectType[] categoriesOfDatasets = new ObsCompositeObjectType[] {
        ObsCompositeObjectType.EventDataset, 
        ObsCompositeObjectType.ResourceDataset, 
        ObsCompositeObjectType.IntervalDataset, 
        ObsCompositeObjectType.DatastreamDataset, 
        ObsCompositeObjectType.MetricSMADataset,
        ObsCompositeObjectType.MonitorSupportDataset,
        ObsCompositeObjectType.InterfaceMetricDataset,
        ObsCompositeObjectType.InterfaceLogDataset};

}
<p>
    @foreach (ObsCompositeObjectType objectType in categoriesOfDatasets)
    {    
        <a href="#@objectType">@objectType</a>
    }
</p>

<p>
    @using (Html.BeginForm("Dataset", "Select", FormMethod.Post))
    {
        <button type="submit" id="buttonExportToExcel" name="buttonExportToExcel" value="Export to Excel">Export to Excel <img src="https://cdn-dynmedia-1.microsoft.com/is/image/microsoftcorp/Icon_Excel_2x_RE2Xztz?resMode=sharp2&op_usm=1.5,0.65,15,0&wid=64&hei=64&qlt=99&fit=constrain" /></button>
    }
</p>

@foreach (ObsCompositeObjectType objectType in categoriesOfDatasets)
{
    List<ObsCompositeObject> selectedDatasets = Model.ObserveEnvironment.ObserveObjects.Where(o => (o.ObjectType & @objectType) == @objectType).ToList();

    if (selectedDatasets.Count > 0)
    {
        <h2 id="@objectType">@objectType (@selectedDatasets.Count)</h2>
        <a href="#top">Back to Top</a>

        <table class="AlternatingRowTable">
            <tr>
                <th>Details</th>
                <th>View</th>
                <th>Edit</th>
                <th>Type</th>
                <th>Origin</th>
                <th>ID</th>
                <th>Name</th>
                <th>Components</th>
                <th>Uses</th>
                <th>Used By</th>
                <th>Created</th>
                <th>Updated</th>
            </tr>
            @foreach (ObsDataset entity in selectedDatasets)
            {
                <tr id="tableRowDataset_@entity.id">
                    <td>@Html.ActionLink("🎫 Details", "Dataset", "Details", new { id = entity.id, userid=@Model.CurrentUser.UniqueID }, null)</td>
                    <td><a href="@String.Format("{0}workspace/{1}/dataset/{2}/{3}", @Model.CurrentUser.CustomerEnvironmentUrl, @Model.CurrentUser.WorkspaceID, entity.kind switch {"Event" => entity.kind.ToLower(), "Resource" => entity.kind.ToLower(), "Interval" => "event", _ => "fallthroughdonttknow"}, entity.id)">📄 Data</a></td>
                    <td><a href="@String.Format("{0}workspace/{1}/definition/{2}", @Model.CurrentUser.CustomerEnvironmentUrl, @Model.CurrentUser.WorkspaceID, entity.id)">🛠️ Edit</a></td>
                    <td>@Html.Raw(entity.kind switch {"Interval" => "⏲", "Event" => "📅", "Resource" => "🗃", _ => "?"}) @entity.kind</td>
                    <td>@Html.Raw(entity.OriginType switch {ObsObjectOriginType.System => "⚙️", ObsObjectOriginType.App => "📊", ObsObjectOriginType.User => "👋", ObsObjectOriginType.DataStream => "🎏", ObsObjectOriginType.Terraform => "🛤️", _ => "❓"}) <span title="@entity.source">@entity.OriginType</span></td>
                    <td>@entity.id</td>
                    <td><span title="@entity.description">@entity.name</span></td>
                    <td>
                        @* StagesTODO: -1/  *@
                        Fields: @entity.Fields.Count <br/>
                        @* KeysTODO: -1/ *@
                        @if (@entity.PrimaryKeys.Count > 0) 
                        {
                            @Html.Raw(String.Format("🔑PK: {0} <br/>", entity.PrimaryKeys.Count))
                        }
                        @if (@entity.ForeignKeys.Count > 0) 
                        {
                            @Html.Raw(String.Format("🔐FK: {0} <br/>", entity.ForeignKeys.Count))
                        }
                        @if (@entity.RelatedKeys.Count > 0) 
                        {
                            @Html.Raw(String.Format("🧲RK: {0}", entity.RelatedKeys.Count))
                        }
                    </td>
                    <td>
                        @{
                            List<ObjectRelationship> dataRelationshipsSource = Model.ObserveEnvironment.GetRelationshipsOfThis(@entity, ObsObjectRelationshipType.ProvidesData);
                            if (dataRelationshipsSource.Count > 0)
                            {
                                @Html.Raw(String.Format("📝Data>This: {0} <br/>", dataRelationshipsSource.Count));
                            }
                            List<ObjectRelationship> linkRelationshipsSource = Model.ObserveEnvironment.GetRelationshipsOfThis(@entity, ObsObjectRelationshipType.Linked);
                            if (linkRelationshipsSource.Count > 0)
                            {
                                @Html.Raw(String.Format("🔗Link>This {0} ", linkRelationshipsSource.Count))
                            }
                        }
                    </td>
                    <td>
                        @{
                            List<ObjectRelationship> dataRelationshipsTarget = Model.ObserveEnvironment.GetRelationshipsOfRelated(@entity, ObsObjectRelationshipType.ProvidesData);
                            List<ObjectRelationship> linkRelationshipsTarget = Model.ObserveEnvironment.GetRelationshipsOfRelated(@entity, ObsObjectRelationshipType.Linked);
                            List<ObjectRelationship> parameterRelationships = Model.ObserveEnvironment.GetRelationshipsOfRelated(@entity, ObsObjectRelationshipType.Provides_Parameter);
                            if (dataRelationshipsTarget.Count > 0)
                            {
                                @Html.Raw(String.Format("📝This>Data: {0} <br/>", dataRelationshipsTarget.Count))
                            }
                            if (linkRelationshipsTarget.Count > 0)
                            {
                                @Html.Raw(String.Format("🔗This>Link: {0} <br/>", linkRelationshipsTarget.Count))
                            }
                            List<ObjectRelationship> monitorDataRelationships = dataRelationshipsTarget.Where(r => (((ObsCompositeObject)r.ThisObject).ObjectType & ObsCompositeObjectType.MonitorSupportDataset) == ObsCompositeObjectType.MonitorSupportDataset).ToList();
                            if (monitorDataRelationships.Count > 0)
                            {
                                @Html.Raw(String.Format("📟This>Monitor: {0} <br/>", monitorDataRelationships.Count))
                            }
                            List<ObjectRelationship> dashboardRelationshipsData = dataRelationshipsTarget.Where(r => (((ObsCompositeObject)r.ThisObject).ObjectType & ObsCompositeObjectType.Dashboard) == ObsCompositeObjectType.Dashboard).ToList();
                            List<ObjectRelationship> dashboardRelationshipsLink = linkRelationshipsTarget.Where(r => (((ObsCompositeObject)r.ThisObject).ObjectType & ObsCompositeObjectType.Dashboard) == ObsCompositeObjectType.Dashboard).ToList();
                            if (dashboardRelationshipsData.Count > 0 || dashboardRelationshipsLink.Count > 0)
                            {
                                @Html.Raw(String.Format("📈This>Dashboard: {0} ", dashboardRelationshipsData.Count + dashboardRelationshipsLink.Count))
                            }
                        }
                        @* As Parameter TODO: -1,
                        By Dashboard TODO: -1,
                        By Worksheet TODO: -1, *@
                    </td>
                    <td>@entity.createdDate.ToString("u")/@entity.createdBy.label</td>
                    <td>@entity.updatedDate.ToString("u")/@entity.updatedBy.label </td>
                </tr>
            }
        </table>
    }
}